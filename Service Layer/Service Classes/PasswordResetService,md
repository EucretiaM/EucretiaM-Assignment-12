import secrets
import os
from datetime import datetime, timedelta
from cryptography.fernet import Fernet
import smtplib
from email.mime.text import MIMEText

class PasswordResetService:
    def __init__(self, token_validity_hours=24, encryption_key=None, smtp_server='localhost', smtp_port=25, smtp_user=None, smtp_password=None, email_sender=None):
        self.token_validity_hours = token_validity_hours
        self.encryption_key = encryption_key if encryption_key else Fernet.generate_key()
        self.cipher = Fernet(self.encryption_key)
        self.smtp_server = smtp_server
        self.smtp_port = smtp_port
        self.smtp_user = smtp_user
        self.smtp_password = smtp_password
        self.email_sender = email_sender

    def generate_token(self, user_id):
        token = secrets.token_urlsafe(32)
        expiry_time = datetime.utcnow() + timedelta(hours=self.token_validity_hours)
        data = f"{user_id}|{token}|{expiry_time.isoformat()}"
        encrypted_data = self.cipher.encrypt(data.encode()).decode()
        return encrypted_data

    def verify_token(self, encrypted_token):
         try:
            decrypted_data = self.cipher.decrypt(encrypted_token.encode()).decode()
            user_id, token, expiry_time_str = decrypted_data.split("|")
            expiry_time = datetime.fromisoformat(expiry_time_str)
            if expiry_time < datetime.utcnow():
                return None, "Token expired"
            return user_id, token
         except Exception:
            return None, "Invalid token"

    def send_reset_email(self, user_email, reset_link):
        msg = MIMEText(f"Please click the following link to reset your password: {reset_link}")
        msg['Subject'] = "Password Reset Request"
        msg['From'] = self.email_sender
        msg['To'] = user_email

        try:
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            if self.smtp_user and self.smtp_password:
                server.starttls()
                server.login(self.smtp_user, self.smtp_password)
            server.send_message(msg)
            server.quit()
            return True, None
        except Exception as e:
            return False, str(e)

    def reset_password(self, user_id, new_password):
        # Implementation to update the password in the database
        print(f"Password reset for user {user_id} to {new_password}")
        return True
